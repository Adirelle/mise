#!/usr/bin/env bash
set -euo pipefail
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
ROOT="$(cd "$SCRIPT_DIR"/.. && pwd)"

# shellcheck source-path=SCRIPTDIR
source "$SCRIPT_DIR/style.sh"

TEST="$1"
TEST_SCRIPT="$SCRIPT_DIR/$TEST"

setup_isolated_env() {
  TEST_ISOLATED_DIR="$(mktemp --tmpdir --directory "$(basename "$TEST").XXXXXX")"

  # Use a fake HOME and a fake temporary directory
  TEST_HOME="$TEST_ISOLATED_DIR/home"
  TEST_WORKDIR="$TEST_HOME/workdir"
  TEST_TMPDIR="$TEST_ISOLATED_DIR/tmp"

  # Tell mise to look for its directory in the isolated environment
  MISE_SYSTEM_DIR="$TEST_ISOLATED_DIR/etc/mise"
  MISE_DATA_DIR="$TEST_HOME/.local/share/mise"
  MISE_CACHE_DIR="$TEST_HOME/.cache/mise"
  MISE_CONFIG_DIR="$TEST_HOME/.config/mise"
  MISE_STATE_DIR="$TEST_HOME/.local/state/mise"
}

create_isolated_env() {
  mkdir --parents "$TEST_WORKDIR" "$TEST_TMPDIR" "$MISE_SYSTEM_DIR" "$MISE_DATA_DIR" "$MISE_STATE_DIR" "$MISE_CACHE_DIR" "$MISE_CONFIG_DIR"
}

remove_isolated_env() {
  rm -rf "$TEST_ISOLATED_DIR"
}

within_isolated_env() {
  env \
    --ignore-environment \
    --chdir="$TEST_WORKDIR" \
    - \
    ROOT="$ROOT" \
    HOME="$TEST_HOME" \
    TMPDIR="$TEST_TMPDIR" \
    SHELL="$(type -p bash)" \
    PATH="${CARGO_TARGET_DIR:-$ROOT/target}/debug:$(dirname "$(type -p cargo)"):/usr/local/bin:/usr/bin:/bin" \
    MISE_USE_TOML=0 \
    MISE_DATA_DIR="$MISE_DATA_DIR" \
    MISE_STATE_DIR="$MISE_STATE_DIR" \
    MISE_CACHE_DIR="$MISE_CACHE_DIR" \
    MISE_CONFIG_DIR="$MISE_CONFIG_DIR" \
    MISE_TMP_DIR="$TEST_TMPDIR" \
    MISE_SYSTEM_DIR="$MISE_SYSTEM_DIR" \
    MISE_ALWAYS_KEEP_DOWNLOAD=1 \
    MISE_TRUSTED_CONFIG_PATHS="$TEST_HOME" \
    MISE_EXPERIMENTAL=1 \
    MISE_YES=1 \
    MISE_TEST_NAME="$TEST" \
    MISE_TEST_ROOT="$SCRIPT_DIR" \
    MISE_TEST_SCRIPT="$TEST_SCRIPT" \
    MISE_TEST_DIR="$(dirname "$TEST_SCRIPT")" \
    NPM_CONFIG_FUND=false \
    GITHUB_ACTION="${GITHUB_ACTION:-}" \
    "$@" || return $?
}

run_test() {
  setup_isolated_env
  create_isolated_env

  START="$(date +%s)"
  local status=0
  within_isolated_env bash --noprofile -euo pipefail -c "source $SCRIPT_DIR/assert.sh && source $TEST_SCRIPT" || status=$?
  END="$(date +%s)"
  echo "$TEST: $((END - START))s" >&2

  if [[ "$status" == 0 ]]; then
    remove_isolated_env
    STATUS_MSG=":white_check_mark:"
  else
    err "E2E Test Failed (code: $status)"
    STATUS_MSG=":x:"
  fi
  if [[ -n "${GITHUB_STEP_SUMMARY:-}" ]]; then
    echo "| $TEST | $((END - START))s | $STATUS_MSG" >>"$GITHUB_STEP_SUMMARY"
  fi
  return "$status"
}

as_group "E2E $TEST" run_test
